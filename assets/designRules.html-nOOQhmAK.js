import{_ as p,r as l,o,c as i,a as n,b as t,w as e,d as s,f as c}from"./app-Y81LU4DT.js";const r={},u=n("h1",{id:"前端ui設計規範引入",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前端ui設計規範引入","aria-hidden":"true"},"#"),s(" 前端UI設計規範引入")],-1),d={class:"table-of-contents"},k=c(`<p>使用背景:<br> UI設計規範通常包含字體、字級、主配色與客製組件的樣式。在工作專案中使用sass，並配置tailwindCSS、Element plus來增加或覆寫預設的樣式。</p><h2 id="對tailwindcss增加定義" tabindex="-1"><a class="header-anchor" href="#對tailwindcss增加定義" aria-hidden="true">#</a> 對tailwindCSS增加定義</h2><p>依照官方文檔建立tailwind.config.js中，加入需要客製定義的元素，tailwind就能在編譯後建立出相依這些元素的樣式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;jit&#39;</span><span class="token punctuation">,</span> <span class="token comment">//只編譯有使用到的樣式</span>
    <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./index.html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./src/**/*.{vue,js,ts,jsx,tsx}&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">//...(略)</span>
        <span class="token literal-property property">colors</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token comment">//...(略) </span>
            <span class="token literal-property property">pressing</span><span class="token operator">:</span> <span class="token string">&#39;#DBE9D8&#39;</span><span class="token punctuation">,</span> <span class="token comment">//定義顏色與對應的色碼</span>
            <span class="token literal-property property">pressing2</span><span class="token operator">:</span> <span class="token string">&#39;#E0F2DE&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">mainGreen</span><span class="token operator">:</span> <span class="token string">&#39;#3bb071&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">mainGreenDarker</span><span class="token operator">:</span> <span class="token string">&#39;#b8d8c9&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">secondColor</span><span class="token operator">:</span> <span class="token string">&#39;#b8d8c9&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在class中，就能使用如text-mainGreen的樣式改變字體顏色，也能使用from-pressing to-pressing2來讓背景的漸層樣式去對應到上段新定義的顏色。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>... bg-gradient-to-r from-pressing to-pressing2 text-mainGreen<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Login</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="對element-plus覆寫定義" tabindex="-1"><a class="header-anchor" href="#對element-plus覆寫定義" aria-hidden="true">#</a> 對Element plus覆寫定義</h2><p>這部分可以分為兩個情況做處理</p><h3 id="在ui庫產生樣式庫前-先修改定義的元素" tabindex="-1"><a class="header-anchor" href="#在ui庫產生樣式庫前-先修改定義的元素" aria-hidden="true">#</a> 在UI庫產生樣式庫前，先修改定義的元素</h3><p>比如要修改顏色中定義為primary的色碼。依照官方文檔去覆寫定義，在專案使用sass的情況下，可以獨立建立一支scss檔案。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>//elementPlusInit.scss
<span class="token atrule"><span class="token rule">@forward</span> <span class="token string">&#39;element-plus/theme-chalk/src/common/var.scss&#39;</span> with <span class="token punctuation">(</span>
    $<span class="token property">colors</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;primary&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
            <span class="token string">&#39;base&#39;</span><span class="token punctuation">:</span> #3bb071
        <span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而必須確保在專案在掛載Element plus樣式庫前，先執行這段scss檔的內容，在我目前使用Vite的情況下，是在vite.config.js中，設定如下。在理解上，是把這支scss檔指令/資料加到vite打包css的預處理流程中，而改變element-plus產生的樣式庫的結果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> mode <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">//...(略) </span>
    <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">preprocessorOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">scss</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">additionalData</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">@use &quot;@/assets/styles/elementPlusInit.scss&quot; as *;</span><span class="token template-punctuation string">\`</span></span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在vite ^2.3.7上打包後 這支預載scss定義的樣式會被重複在每一個分割的組件css中 所以目前先採取只先把定義修改的指令在這支檔案，否則會有大量的重複樣式產生在開發和打包結果中。</p></blockquote><h3 id="在ui庫產生樣式庫後-覆寫已經定義好的樣式" tabindex="-1"><a class="header-anchor" href="#在ui庫產生樣式庫後-覆寫已經定義好的樣式" aria-hidden="true">#</a> 在UI庫產生樣式庫後，覆寫已經定義好的樣式</h3><p>這部分的實作，就是打開dev tool找到畫面上element-plus給組件配的樣式名稱，再做一次覆寫。而這邊的覆寫，還嘗試加入深/淺模式變化上，強制(!important)讓組件的樣式換上自定義的顏色(但可能還有更漂亮的作法?)。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.el-table</span> <span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--font-color<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">--el-table-bg-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">--el-table-tr-bg-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">--el-table-row-hover-bg-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bgHover<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.el-table__expanded-cell[class*=&#39;cell&#39;]</span> <span class="token punctuation">{</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 10px 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.el-table td,
.el-table th</span> <span class="token punctuation">{</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> 400<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.el-breadcrumb__inner a</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--font-color<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function v(m,b){const a=l("router-link");return o(),i("div",null,[u,n("nav",d,[n("ul",null,[n("li",null,[t(a,{to:"#對tailwindcss增加定義"},{default:e(()=>[s("對tailwindCSS增加定義")]),_:1})]),n("li",null,[t(a,{to:"#對element-plus覆寫定義"},{default:e(()=>[s("對Element plus覆寫定義")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#在ui庫產生樣式庫前-先修改定義的元素"},{default:e(()=>[s("在UI庫產生樣式庫前，先修改定義的元素")]),_:1})]),n("li",null,[t(a,{to:"#在ui庫產生樣式庫後-覆寫已經定義好的樣式"},{default:e(()=>[s("在UI庫產生樣式庫後，覆寫已經定義好的樣式")]),_:1})])])])])]),k])}const h=p(r,[["render",v],["__file","designRules.html.vue"]]);export{h as default};
