import{_ as a,r as c,o as l,c as i,a as e,b as o,w as r,d as t,f as h}from"./app-_1tR9Ltq.js";const d={},_=e("h2",{id:"websocket",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#websocket","aria-hidden":"true"},"#"),t(" websocket")],-1),u={class:"table-of-contents"},k=e("p",null,'websocket是一種連線server端的方式，用來傳送和接收資料。從client端發起連結的請求，是從一般的http request"升級"成websocket，這種連線方式也是被w3c認可的技術。',-1),f=e("p",null,"socketIO是js套件，處理雙向(client和server端)、即時性的事件，它包含websocket的技術，但封裝更多管理/操作websocket的API提供client端/server端使用。",-1),b={class:"custom-container warning"},p=e("p",{class:"custom-container-title"},"WARNING",-1),w={href:"https://socket.io/docs/v4/",target:"_blank",rel:"noopener noreferrer"},m=e("h2",{id:"詳細比較",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#詳細比較","aria-hidden":"true"},"#"),t(" 詳細比較")],-1),I=e("p",null,"在這篇的討論中，可以知道使用socketIO是較容易就能去建立資料交換的流程和管理機制，且支援更多的client端使用情境。",-1),v={href:"https://stackoverflow.com/questions/10112178/differences-between-socket-io-and-websockets",target:"_blank",rel:"noopener noreferrer"},g=e("h2",{id:"使用教學",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用教學","aria-hidden":"true"},"#"),t(" 使用教學")],-1),x=e("p",null,'教學影片切入socketIO在實務上有前後端分離時，要透過API io("url")建立連線以及server端處理cors的設定。',-1),A={href:"https://www.youtube.com/watch?v=BAZ-tJOYhlA&ab_channel=HiteshChoudhary",target:"_blank",rel:"noopener noreferrer"},O=h('<h2 id="f12檢視" tabindex="-1"><a class="header-anchor" href="#f12檢視" aria-hidden="true">#</a> F12檢視</h2><p>簡言之，建立websocket是希望client端即時和有效率的取得server端管理的資料，像是多個client端同時使用聊天功能，有需要&quot;被通知&quot;新的聊天資料。</p><p>devtool ws 建立 <img src="https://i.imgur.com/bOmTOAK.jpg" alt=""></p><h2 id="連結" tabindex="-1"><a class="header-anchor" href="#連結" aria-hidden="true">#</a> 連結</h2>',4),N={href:"https://github.com/lian0103/node_chatroom",target:"_blank",rel:"noopener noreferrer"},S={href:"http://jason-node-chatroom.herokuapp.com/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers",target:"_blank",rel:"noopener noreferrer"};function W(q,y){const s=c("router-link"),n=c("ExternalLinkIcon");return l(),i("div",null,[_,e("nav",u,[e("ul",null,[e("li",null,[o(s,{to:"#websocket"},{default:r(()=>[t("websocket")]),_:1})]),e("li",null,[o(s,{to:"#詳細比較"},{default:r(()=>[t("詳細比較")]),_:1})]),e("li",null,[o(s,{to:"#使用教學"},{default:r(()=>[t("使用教學")]),_:1})]),e("li",null,[o(s,{to:"#f12檢視"},{default:r(()=>[t("F12檢視")]),_:1})]),e("li",null,[o(s,{to:"#連結"},{default:r(()=>[t("連結")]),_:1})])])]),k,f,e("div",b,[p,e("p",null,[t("在client端，要使用socketIO去建立的連線，server端也必須使用socketIO提供的API，client端並不能直接使用socketIO去連接單純的(plant)websocket。 "),e("a",w,[t("socketIO官方文件"),o(n)])])]),m,I,e("p",null,[e("a",v,[t("differences-between-socket-io-and-websockets"),o(n)])]),g,x,e("p",null,[e("a",A,[t("socket io crash course | easy way"),o(n)])]),O,e("ol",null,[e("li",null,[e("a",N,[t("專案連結"),o(n)])]),e("li",null,[e("a",S,[t("聊天室"),o(n)])]),e("li",null,[e("a",P,[t("MDN WebSockets_API"),o(n)])])])])}const V=a(d,[["render",W],["__file","websocketAndSocketIO.html.vue"]]);export{V as default};
