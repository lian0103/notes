import{_ as i,r as c,o as l,c as u,a as n,b as a,w as e,d as s,e as o}from"./app-Pb3OPLon.js";const r={},d=n("h1",{id:"ui元件單元測試",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ui元件單元測試","aria-hidden":"true"},"#"),s(" UI元件單元測試")],-1),k={class:"table-of-contents"},v=o(`<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><p>在給予特定條件的情形下，有期待的對應產出。例如，對函式的回傳、元件的渲染結果進行確認。優點是可以把規格轉換成測試腳本，確保修改/迭代過程的正確性。</p><h2 id="工具" tabindex="-1"><a class="header-anchor" href="#工具" aria-hidden="true">#</a> 工具</h2><p>常見的單元測試的庫:Jest、vitest</p><h2 id="安裝vitest" tabindex="-1"><a class="header-anchor" href="#安裝vitest" aria-hidden="true">#</a> 安裝vitest</h2><h3 id="安裝指令" tabindex="-1"><a class="header-anchor" href="#安裝指令" aria-hidden="true">#</a> 安裝指令</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> vitest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),m={href:"https://vitest.dev/guide/#adding-vitest-to-your-project",target:"_blank",rel:"noopener noreferrer"},h=o(`<h3 id="新增指令與參數" tabindex="-1"><a class="header-anchor" href="#新增指令與參數" aria-hidden="true">#</a> 新增指令與參數</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">//package.json</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;test:unit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vitest --environment jsdom --coverage&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),g={href:"https://vitest.dev/config/#environment",target:"_blank",rel:"noopener noreferrer"},b={href:"https://vitest.dev/config/#coverage",target:"_blank",rel:"noopener noreferrer"},f=o(`<h3 id="新增測試腳本檔" tabindex="-1"><a class="header-anchor" href="#新增測試腳本檔" aria-hidden="true">#</a> 新增測試腳本檔</h3><p><strong>在__test__資料夾下，以xxx.spec.js命名</strong></p><p><img src="https://i.imgur.com/UasFjlM.jpg" alt=""></p><p><strong>在vite設定中也要把測試檔案的路徑加入。</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//vite.confit.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>mode<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">global</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token literal-property property">environment</span><span class="token operator">:</span> <span class="token string">&#39;jsdom&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">includeSource</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;src/components/__test__/*.spec.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="語法" tabindex="-1"><a class="header-anchor" href="#語法" aria-hidden="true">#</a> 語法</h2><p>常見的單元測試語法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> screen <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@testing-library/vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> describe<span class="token punctuation">,</span> it<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vitest&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> GButton <span class="token keyword">from</span> <span class="token string">&#39;../GButton.vue&#39;</span><span class="token punctuation">;</span>
<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;測試GButton&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;項目1 渲染是否正常&#39;</span><span class="token punctuation">,</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span>GButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;gt-btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">info</p><p>describe 用來描述測試項目的群組 it 測試項目 render 渲染函式</p></div><h2 id="範例測試" tabindex="-1"><a class="header-anchor" href="#範例測試" aria-hidden="true">#</a> 範例測試</h2><p>這個範例中，是以GT UI的按鈕原件作為測試對象。預期它渲染在畫面後，html結構中正常情況在class包含了&quot;gt-btn&quot;。</p><p><img src="https://i.imgur.com/FM3ePmy.jpg" alt=""></p><hr><p>假如，日後在修改該元件檔案時，不小心把class名稱變更gt-btnrrr，則會在測試時提示錯誤。 <img src="https://i.imgur.com/7wbHHNf.jpg" alt=""></p><hr><p>延伸，當元件可以依據傳入的屬性有更多渲染的情境出現，比如要渲染一個有屬性yellow的按鈕，同時預設是沒有邊框線的，這時就有兩個預期的渲染結果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;項目2 渲染屬性yellow按鈕&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span>GButton<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;yellow&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;gt-btn-yellow&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;gt-btn-round-no-border&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="測試覆蓋率" tabindex="-1"><a class="header-anchor" href="#測試覆蓋率" aria-hidden="true">#</a> 測試覆蓋率</h2><p>在gt-button.spec.js中，共計我寫了5個測試項目，vitest也會列出在這個測試過程使用到的檔案中，語句覆蓋率為91.5，且其他沒被覆蓋的行數(紅字)。</p><p><img src="https://i.imgur.com/9M4jfxt.jpg" alt=""></p><div class="custom-container tip"><p class="custom-container-title">info</p><p><strong>覆蓋率報告</strong></p><ul><li>% Stmts (語句覆蓋率) 程式碼中的每個語句是否皆有執行。</li><li>% branch(分支覆蓋率) 當程式碼中有分支時，例如 if-else，分支內容是否皆有執行。</li><li>% Funcs(功能覆蓋率) 程式碼中的每個功能是否皆有執行。</li><li>% Lines(行覆蓋率) 指的是程式碼文件中的每個可執行行，是否皆有執行。</li><li>Uncovered Line #s 未執行程式碼於檔案中的行數</li></ul></div>`,21);function _(y,x){const t=c("router-link"),p=c("ExternalLinkIcon");return l(),u("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[a(t,{to:"#概念"},{default:e(()=>[s("概念")]),_:1})]),n("li",null,[a(t,{to:"#工具"},{default:e(()=>[s("工具")]),_:1})]),n("li",null,[a(t,{to:"#安裝vitest"},{default:e(()=>[s("安裝vitest")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#安裝指令"},{default:e(()=>[s("安裝指令")]),_:1})]),n("li",null,[a(t,{to:"#新增指令與參數"},{default:e(()=>[s("新增指令與參數")]),_:1})]),n("li",null,[a(t,{to:"#新增測試腳本檔"},{default:e(()=>[s("新增測試腳本檔")]),_:1})])])]),n("li",null,[a(t,{to:"#語法"},{default:e(()=>[s("語法")]),_:1})]),n("li",null,[a(t,{to:"#範例測試"},{default:e(()=>[s("範例測試")]),_:1})]),n("li",null,[a(t,{to:"#測試覆蓋率"},{default:e(()=>[s("測試覆蓋率")]),_:1})])])]),v,n("p",null,[n("a",m,[s("vitest doc"),a(p)])]),h,n("p",null,[s("設定為測試UI元件的參數 "),n("a",g,[s("vitest --environment doc"),a(p)])]),n("p",null,[s("設定為測試相關連的檔案模式 "),n("a",b,[s("vitest --coverage"),a(p)])]),f])}const j=i(r,[["render",_],["__file","Vitest.html.vue"]]);export{j as default};
