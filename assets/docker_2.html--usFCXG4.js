import{_ as c,r as i,o as l,c as o,a as n,b as e,w as t,d as a,f as p}from"./app-6q9sqzG_.js";const r={},d=n("h1",{id:"docker使用知識與方法-閱讀筆記-二",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#docker使用知識與方法-閱讀筆記-二","aria-hidden":"true"},"#"),a(" Docker使用知識與方法 閱讀筆記(二)")],-1),u={class:"table-of-contents"},m=p(`<img src="https://i.imgur.com/BhBysqw.jpg" style="width:300px;"><h2 id="安裝docker-desktop-mac版" tabindex="-1"><a class="header-anchor" href="#安裝docker-desktop-mac版" aria-hidden="true">#</a> 安裝Docker Desktop(Mac版)</h2><ul><li>安裝結果</li></ul><img src="https://i.imgur.com/HNS31yG.png" style="width:300px;"><ul><li>啟動與停用Docker Engine</li></ul><img src="https://i.imgur.com/nMSnF1L.png" style="width:300px;"><h2 id="doccker操作指令的結構" tabindex="-1"><a class="header-anchor" href="#doccker操作指令的結構" aria-hidden="true">#</a> Doccker操作指令的結構</h2><ul><li>上級指令與副指令</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token punctuation">[</span>上級指令+副指令<span class="token punctuation">]</span> 對象
<span class="token comment">## ex docker container（上級指令） run (副指令) penguin</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>選項與參數(Optional) <strong>選項和參數擺放順序會影響執行</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token punctuation">[</span>上級指令+副指令<span class="token punctuation">]</span> <span class="token punctuation">[</span>-選項<span class="token punctuation">]</span> <span class="token punctuation">[</span>--參數<span class="token punctuation">]</span> <span class="token punctuation">[</span>映像檔<span class="token punctuation">]</span> 
<span class="token comment">## ex docker container(上級指令) run(副指令) -d(選項) penguin --mode=1(參數)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以同時帶入多個<strong>選項 -dit</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> container run <span class="token parameter variable">-dit</span> penguin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>常用指令</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> version <span class="token comment">## 查看版本</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token punctuation">[</span>-a<span class="token punctuation">]</span> <span class="token comment">## 等同 docker container ls -a(所有容器)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="取得映像檔" tabindex="-1"><a class="header-anchor" href="#取得映像檔" aria-hidden="true">#</a> 取得映像檔</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull <span class="token punctuation">[</span>image<span class="token punctuation">]</span> <span class="token comment">## 在docker hub中已發佈的映像檔</span>
<span class="token function">docker</span> image <span class="token function">ls</span> <span class="token comment">## 在主機已存在的映像檔</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://i.imgur.com/UTKCNwB.png" style="width:300px;"><h2 id="容器-建立、啟動、停用、刪除" tabindex="-1"><a class="header-anchor" href="#容器-建立、啟動、停用、刪除" aria-hidden="true">#</a> 容器-建立、啟動、停用、刪除</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> webservice httpd:2.2 <span class="token comment">## 依據Apache httpd映像檔[版本號2.2]，建立名為webservice的容器，在背景執行(-d);未指定版本號時，預設是最新版本</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token comment">## 查看運行中的容器</span>
<span class="token function">docker</span> stop <span class="token punctuation">[</span>container name<span class="token punctuation">]</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token comment">## 查看運行中和停用的容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token punctuation">[</span>container name<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="容器-通訊" tabindex="-1"><a class="header-anchor" href="#容器-通訊" aria-hidden="true">#</a> 容器-通訊</h2><ul><li>連線Apache服務</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 <span class="token parameter variable">--name</span> webservice httpd 
<span class="token comment">## 外部訪問Docker Engine走8080port，對應到webservice的80 port(網路連接阜)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在本地走 http://localhost:8080 便可以訪問。</p><ul><li>連線Ngnix服務</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> nginxWebSerivec <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8081</span>:80 nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="複製容器與主機的檔案" tabindex="-1"><a class="header-anchor" href="#複製容器與主機的檔案" aria-hidden="true">#</a> 複製容器與主機的檔案</h2><ul><li>替換Apache的index.html</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## step1 啟動網路服務</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8081</span>:80 <span class="token parameter variable">--name</span> webService001 httpd
<span class="token comment">## step2 複製檔案</span>
<span class="token function">docker</span> <span class="token function">cp</span> /file/path <span class="token punctuation">[</span>container name<span class="token punctuation">]</span>:/usr/local/apache2/htdocs <span class="token comment">## 會看到新的html內容</span>
<span class="token comment">## ex docker cp /Users/xxx/Desktop/index.html webService001:/usr/local/apache2/htdocs/ </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://i.imgur.com/OMVpo65.png" style="width:300px;"><h2 id="卷宗-volumn-掛載" tabindex="-1"><a class="header-anchor" href="#卷宗-volumn-掛載" aria-hidden="true">#</a> 卷宗(volumn)掛載</h2><ul><li>-v選項存在時，目的是要把指定在<strong>卷宗名稱/主機檔案資料夾路徑</strong>，取代<strong>容器內檔案資料夾路徑</strong>來替代，因此容器實際使用的資源就會是在本機。換言之，卷宗是不存在於容器之內，卷宗是在容器運行時掛載(mounted)來使用。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8084</span>:80 <span class="token parameter variable">--name</span> webService002 <span class="token parameter variable">-v</span> <span class="token punctuation">[</span>卷宗名稱/主機檔案資料夾路徑<span class="token punctuation">]</span>:<span class="token punctuation">[</span>容器內檔案資料夾路徑<span class="token punctuation">]</span> httpd 
<span class="token comment">## ex docker run -d -p 8084:80 --name webService002 -v /Users/jasonlien/Desktop/:/usr/local/apache2/htdocs/ httpd </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>掛載結果</li></ul><img src="https://i.imgur.com/uOwHhwB.png" style="width:300px;"><br><img src="https://i.imgur.com/l7jLNEL.png" style="width:300px;">`,37);function k(h,v){const s=i("router-link");return l(),o("div",null,[d,n("nav",u,[n("ul",null,[n("li",null,[e(s,{to:"#安裝docker-desktop-mac版"},{default:t(()=>[a("安裝Docker Desktop(Mac版)")]),_:1})]),n("li",null,[e(s,{to:"#doccker操作指令的結構"},{default:t(()=>[a("Doccker操作指令的結構")]),_:1})]),n("li",null,[e(s,{to:"#取得映像檔"},{default:t(()=>[a("取得映像檔")]),_:1})]),n("li",null,[e(s,{to:"#容器-建立、啟動、停用、刪除"},{default:t(()=>[a("容器-建立、啟動、停用、刪除")]),_:1})]),n("li",null,[e(s,{to:"#容器-通訊"},{default:t(()=>[a("容器-通訊")]),_:1})]),n("li",null,[e(s,{to:"#複製容器與主機的檔案"},{default:t(()=>[a("複製容器與主機的檔案")]),_:1})]),n("li",null,[e(s,{to:"#卷宗-volumn-掛載"},{default:t(()=>[a("卷宗(volumn)掛載")]),_:1})])])]),m])}const g=c(r,[["render",k],["__file","docker_2.html.vue"]]);export{g as default};
