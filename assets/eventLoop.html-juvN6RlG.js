import{_ as e,r as o,o as p,c,a as n,d as s,b as t,e as i}from"./app-Pb3OPLon.js";const l={},u=i(`<h1 id="js-event-loop-複習" tabindex="-1"><a class="header-anchor" href="#js-event-loop-複習" aria-hidden="true">#</a> JS event loop 複習</h1><p>根據 ChatGPT 的定義，<strong>JavaScript event loop 是確保非同步操作的順利進行的機制，它通過處理事件隊列中的回調函數來確保在單線程下避免阻塞，使得 JavaScript 可以處理大量的非同步任務</strong></p><h2 id="事件隊列" tabindex="-1"><a class="header-anchor" href="#事件隊列" aria-hidden="true">#</a> 事件隊列</h2><p>所以理論上，在列隊裡會被放入等待處理的非同步操作，像是 setTimeout、setInterval、http request、Promise、async await 等，這些相應的 callback funtion(cb)會被加入到列隊中，來等待執行。</p><h2 id="事件列隊範例" tabindex="-1"><a class="header-anchor" href="#事件列隊範例" aria-hidden="true">#</a> 事件列隊範例</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;context start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 任務二</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 任務一</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 任務三</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;context end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 執行結果</span>
<span class="token comment">// context start</span>
<span class="token comment">// context end</span>
<span class="token comment">// 1</span>
<span class="token comment">// 2</span>
<span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>從執行結果來看，js 的單線程(Single-threaded)，它由文本(context)從上而下，依序的動作是:<br> 1.印出&quot;context start&quot;<br> 2.把 setTimeout 到 cb(<strong>宏任務</strong>)放到事件列隊<br> 3.把 resolve().then 到 cb(<strong>微任務</strong>)放到事件列隊<br> 4.把 setTimeout 到 cb(<strong>宏任務</strong>)放到事件列隊<br> 5.印出&quot;context end&quot;<br> 目前的事件列隊: [任務二(宏任務)、任務一(微任務)、任務三(宏任務)]<br> 6.依<strong>優先序</strong>執行事件列隊<br> ChatGPT:<strong>微任務的執行優先順序要高於宏任務</strong>，也就是說，當主執行緒空閒時，會優先執行微任務，直到微任務隊列為空，才會繼續執行宏任務。這種區分有助於避免長時間運行的宏任務阻塞主執行緒，確保網頁的響應性能。</p><p>6-1 印出&quot;1&quot; // 任務一<br> 6-2 印出&quot;2&quot; // 任務二<br> 6-3 印出&quot;3&quot; // 任務三</p><p>另一個範例，多個微任務與多個宏任務</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;in setTimeout&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;in resolve&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// start</span>
<span class="token comment">// end</span>
<span class="token comment">// in resolve 5</span>
<span class="token comment">// in resolve 5</span>
<span class="token comment">// in resolve 5</span>
<span class="token comment">// in resolve 5</span>
<span class="token comment">// in resolve 5</span>
<span class="token comment">// in setTimeout 5</span>
<span class="token comment">// in setTimeout 5</span>
<span class="token comment">// in setTimeout 5</span>
<span class="token comment">// in setTimeout 5</span>
<span class="token comment">// in setTimeout 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,11),r=n("br",null,null,-1),k={href:"https://juejin.cn/post/7258952063219384376",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),v={href:"https://juejin.cn/post/7260059106764963897",target:"_blank",rel:"noopener noreferrer"};function m(b,g){const a=o("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[s("相關文章"),r,n("a",k,[s("我入职了"),t(a)]),d,n("a",v,[s("是宏任务先执行还是微任务？-掘金"),t(a)])])])}const f=e(l,[["render",m],["__file","eventLoop.html.vue"]]);export{f as default};
